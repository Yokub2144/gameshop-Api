using System.Net.NetworkInformation;
using Gameshop_Api.Data;
using Gameshop_Api.DTOs;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Gameshop_Api.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class OrdersController : ControllerBase
    {
        private readonly AppDbContext _context;

        public OrdersController(AppDbContext context)
        {
            _context = context;
        }

        [HttpPost("CreateOrder")]
        public async Task<IActionResult> CreateOrder([FromBody] DTOs.CreateOrderDto dto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                var cartItems = await _context.Cart
                    .Where(c => c.uid == dto.uid)
                    .Join(
                        _context.Games,
                        cart => cart.game_id,
                        game => game.game_Id,
                        (cart, game) => new
                        {
                            cart.game_id,
                            game.price,
                            game.title
                        }
                    )
                    .ToListAsync();

                if (!cartItems.Any())
                {
                    await transaction.RollbackAsync();
                    return BadRequest(new { message = "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤" });
                }

                // üåü ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Orders üåü
                var cartGameIds = cartItems.Select(item => item.game_id).ToList();

                var ownedGames = await (from order in _context.Orders
                                        join orderDetail in _context.OrderDetails on order.oid equals orderDetail.oid
                                        join game in _context.Games on orderDetail.game_id equals game.game_Id
                                        where order.uid == dto.uid && cartGameIds.Contains(Convert.ToInt32(orderDetail.game_id))
                                        select game.title)
                                        .Distinct() // ‡πÉ‡∏ä‡πâ Distinct ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                                        .ToListAsync();

                if (ownedGames.Any())
                {
                    var ownedGameTitles = string.Join(", ", ownedGames);
                    await transaction.RollbackAsync();
                    return BadRequest(new
                    {
                        message = $"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ: ‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: {ownedGameTitles}",
                        owned_games = ownedGameTitles
                    });
                }
                // üåü ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö üåü

                var totalPrice = cartItems.Sum(item => item.price);
                var purchasedGameTitles = string.Join(", ", cartItems.Select(item => item.title));

                var existingWallet = await _context.Wallets.FindAsync(dto.uid);

                if (existingWallet == null || existingWallet.balance < totalPrice)
                {
                    await transaction.RollbackAsync();
                    return BadRequest(new { message = "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô Wallet ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
                }

                var newOrder = new Gameshop_Api.Models.Orders
                {
                    uid = dto.uid,
                    total_amount = totalPrice,
                    order_date = DateTime.Now,
                };
                _context.Orders.Add(newOrder);
                await _context.SaveChangesAsync();

                foreach (var item in cartItems)
                {
                    var orderDetail = new Gameshop_Api.Models.OrderDetail
                    {
                        oid = newOrder.oid,
                        game_id = item.game_id,
                        price = item.price
                    };
                    _context.OrderDetails.Add(orderDetail);

                    // ‚ùå ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á _context.UserGames.Add(userGame) ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß

                    var cartToRemove = await _context.Cart.FirstOrDefaultAsync(c => c.uid == dto.uid && c.game_id == item.game_id);
                    if (cartToRemove != null)
                    {
                        _context.Cart.Remove(cartToRemove);
                    }
                }

                existingWallet.balance -= totalPrice;
                _context.Wallets.Update(existingWallet);

                var transactionRecord = new Gameshop_Api.Models.Transaction
                {
                    uid = dto.uid,
                    transaction_type = "PURCHASE",
                    reference_id = newOrder.oid.ToString(),
                    amount_value = -totalPrice,
                    detail = $"Purchase order ID: {newOrder.oid}. Games: {purchasedGameTitles}",
                    status = "COMPLETED",
                    created_at = DateTime.Now
                };
                _context.Transactions.Add(transactionRecord);

                await _context.SaveChangesAsync();

                await transaction.CommitAsync();

                return Ok(new
                {
                    message = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    order_id = newOrder.oid,
                    total_price = newOrder.total_amount,
                    purchased_games = purchasedGameTitles
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, new { message = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {ex.Message}" });
            }
        }
        [HttpGet("getTransactionByUserId/{uid}")]
        public async Task<IActionResult> getTransactionByUserId(int uid)
        {
            try
            {
                // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Transaction ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° uid
                var transactions = await _context.Transactions
                    .Where(t => t.uid == uid)
                    .OrderByDescending(t => t.created_at) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
                    .ToListAsync();

                if (!transactions.Any())
                {
                    return NotFound(new { message = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
                }

                // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                var transactionHistory = new List<object>();

                // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                foreach (var t in transactions)
                {
                    if (t.transaction_type == "TOPUP")
                    {
                        // 1. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô (TOPUP)
                        transactionHistory.Add(new
                        {
                            transaction_id = t.tid,
                            type = "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
                            amount = t.amount_value,
                            date = t.created_at,
                            detail = t.detail // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
                        });
                    }
                    else if (t.transaction_type == "PURCHASE")
                    {
                        // 2. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° (PURCHASE)

                        // ‡∏î‡∏∂‡∏á Order ID ‡∏à‡∏≤‡∏Å referance_id (‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ referance_id ‡πÄ‡∏Å‡πá‡∏ö Order ID ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
                        if (int.TryParse(t.reference_id, out int orderId))
                        {
                            // ‡πÉ‡∏ä‡πâ Order ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Order Details ‡πÅ‡∏•‡∏∞ Game Information
                            var purchaseDetails = await _context.OrderDetails
                                .Where(od => od.oid == orderId) // ‡πÉ‡∏ä‡πâ oid ‡∏ï‡∏≤‡∏° Schema ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                                .Join(
                                    _context.Games,
                                    od => od.game_id,
                                    g => g.game_Id,
                                    (od, g) => new
                                    {
                                        GameName = g.title,
                                        GamePrice = od.price // ‡πÉ‡∏ä‡πâ price ‡∏ï‡∏≤‡∏° Schema ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                                    }
                                )
                                .ToListAsync();

                            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô -t.amount_value)
                            var totalSpent = Math.Abs(t.amount_value);

                            transactionHistory.Add(new
                            {
                                transaction_id = t.tid,
                                type = "‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°",
                                total_price = totalSpent,
                                date = t.created_at,
                                // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
                                purchase_items = purchaseDetails,
                                detail = t.detail
                            });
                        }
                    }
                }

                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                return Ok(transactionHistory);
            }
            catch (Exception ex)
            {
                // ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                return StatusCode(500, new { message = $"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: {ex.Message}" });
            }
        }
    }
}